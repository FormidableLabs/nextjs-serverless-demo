# CloudFormation output name: `sls-${SERVICE_NAME}-${STAGE}`
service: sls-${self:custom.service}

package:
  individually: true

custom:
  service: ${env:SERVICE_NAME}
  region: ${opt:region, env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}
  jetpack:
    preInclude:
      - "!**" # Start with no files at all.
    trace:
      ignores:
        # Provided on Lambda
        - "aws-sdk"

        # Ignore real deps in Next.js that we shouldn't need at runtime.
        - "adjust-sourcemap-loader"
        - "caniuse-lite"
        - "css-loader"
        - "loader-utils"
        - "pnp-webpack-plugin"
        - "postcss-modules-extract-imports"
        - "postcss-modules-local-by-default"
        - "postcss-modules-scope"
        - "postcss-modules-values"
        - "postcss-selector-parser"
        - "postcss-value-parser"
        - "postcss"
        - "resolve-url-loader"
        - "sass-loader"
        - "style-loader"
        - "watchpack"
        - "webpack-sources"
        - "webpack"

        # Ignore some build time webpack-y things.
        - "next-plugin-loader?middleware=document-head-tags-server!"

      allowMissing:
        "node-fetch":
          - "encoding"
        "next":
          - "critters"  # for CSS optimization
          - "pnpapi"    # for PnP usage

      dynamic:
        resolutions:
          # TODO(SERVER): Lots more resolutions needed!

          # Our server does lazy requires of pages.
          "./server/index.js": []

          # [169:22]: require(`./transformers/${Transformer}.js`)
          "@ampproject/toolbox-optimizer/lib/DomTransformer.js": []

          # express/lib/view.js [81:13]: require(mod)
          "express/lib/view.js": []

          # Next.js lazy-loading of manifests and server page bundles.
          # next/dist/next-server/server/load-components.js [1:1034]: require((0,_path.join)(distDir,_constants.BUILD_MANIFEST))
          # next/dist/next-server/server/load-components.js [1:1093]: require((0,_path.join)(distDir,_constants.REACT_LOADABLE_MANIFEST))
          "next/dist/next-server/server/load-components.js": []
          # next/dist/next-server/server/require.js [1:656]: require((0,_path.join)(serverBuildPath,_constants.PAGES_MANIFEST))
          # next/dist/next-server/server/require.js [1:1183]: require(pagePath)
          # next/dist/next-server/server/require.js [1:1387]: require((0,_path.join)(serverBuildPath,_constants.FONT_MANIFEST))
          "next/dist/next-server/server/require.js": []

plugins:
  - serverless-jetpack
  - serverless-offline

provider:
  name: aws

  # Required: import the default role that terraform-aws-serverless generates.
  role:
    Fn::ImportValue: tf-${self:custom.service}-${self:custom.stage}-LambdaExecutionRoleArn

  # Lambda configuration
  runtime: nodejs12.x
  timeout: 30 # seconds (`300` max)
  memorySize: 128 # MB value (`1024` default)

  # Deployment / environment configuration
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
    SERVICE_NAME: ${self:custom.service}

  # AWS Resource Tags: Match terraform module
  stackTags: # For CF stack
    Stage: ${self:custom.stage}
    Service: ${self:custom.service}
  tags: # For resources
    Stage: ${self:custom.stage}
    Service: ${self:custom.service}

  # TODO(STATIC): Allows serving of binary media. Shouldn't use this for real.
  apiGateway:
    binaryMediaTypes:
      - "*/*"

functions:
  # SCENARIO - base: The simplest, vanilla Serverless app.
  blog:
    handler: server/index.handler
    environment:
      BASE_PATH: /blog
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /blog
      - http: 'ANY /blog/{proxy+}'
    jetpack:
      trace:
        include:
          # Next.js-generated files: gather dependencies
          - ".next/server/**/*.js"
    package:
      include:
        # Raw data for posts is read from disk outside `.next` build directory.
        - "posts/**/*.md"
        # Needed built Next.js assets and info. (Some of these are also traced).
        - ".next/BUILD_ID"
        - ".next/*.json"
        - ".next/server/**"
        # TODO(STATIC): Add a note about this.
        - ".next/static/**"
        - "public/**"
